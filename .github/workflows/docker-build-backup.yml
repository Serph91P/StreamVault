name: Docker Build and Push with Auto-Versioning

on:
  push:
    branches:
      - develop
      - main
      - rebase
    paths:
      - 'app/**'
      - 'migrations/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/docker-build.yml'

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to create tags
    outputs:
      new_version: ${{ steps.fallback_version.outputs.new_version }}
      release_type: ${{ steps.semver.outputs.release_type }}
      branch: ${{ steps.branch_name.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch name
        id: branch_name
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Determine version bump
        id: semver
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR|BREAKING CHANGE)"
          minor_pattern: "(MINOR|feat|feature)"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true
          search_commit_body: false

      - name: Fallback version generation
        id: fallback_version
        run: |
          # If semantic versioning failed, generate version based on timestamp and commit
          if [ -z "${{ steps.semver.outputs.new_version }}" ] || [ "${{ steps.semver.outputs.new_version }}" == "" ]; then
            # Get the latest tag or default to 1.0.0
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
            # Remove 'v' prefix for calculation
            LATEST_VERSION=${LATEST_TAG#v}
            # Split version into parts
            IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
            MAJOR=${VERSION_PARTS[0]:-1}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}
            # Increment patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Generated fallback version: $NEW_VERSION"
          else
            echo "new_version=${{ steps.semver.outputs.new_version }}" >> $GITHUB_OUTPUT
            echo "Using semantic version: ${{ steps.semver.outputs.new_version }}"
          fi
          
          # Also set an absolute fallback if everything else fails
          if [ -z "$(cat $GITHUB_OUTPUT | grep new_version=)" ]; then
            TIMESTAMP_VERSION="1.0.$(date +%Y%m%d%H%M)"
            echo "new_version=$TIMESTAMP_VERSION" >> $GITHUB_OUTPUT
            echo "Using timestamp fallback version: $TIMESTAMP_VERSION"
          fi

      - name: Create version tag
        id: create_tag
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ steps.fallback_version.outputs.new_version }}
          echo "Creating tag v$VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v$VERSION -m "Release v$VERSION"
          git push origin v$VERSION || { echo "Failed to push tag"; exit 1; }
          echo "Tag v$VERSION created and pushed successfully"
  check_changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Needed to checkout code
    outputs:
      backend_changed: ${{ steps.check_paths.outputs.backend_changed }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if backend files changed
        id: check_paths
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend_changed:
              - 'app/**'
              - 'migrations/**'
              - 'Dockerfile'
              - 'requirements.txt'

  build:
    needs: [version, check_changes]
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Needed to checkout code
      packages: write  # Needed to push Docker images
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'
        
    - name: Build Frontend
      if: needs.check_changes.outputs.backend_changed == 'true'
      run: |
        cd app/frontend
        npm install
        npm run build
        mkdir -p ../../dist
        cp -r dist/* ../../dist/
        
    - name: Use cached frontend build
      if: needs.check_changes.outputs.backend_changed != 'true'
      run: echo "Using cached frontend build"
        
    - name: Prepare metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: frequency2098/streamvault
        tags: |
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
          type=raw,value=v${{ needs.version.outputs.new_version }},enable=${{ github.ref == 'refs/heads/main' }}
        labels: |
          org.opencontainers.image.title=StreamVault
          org.opencontainers.image.description=Automated Twitch stream recording and management system
          org.opencontainers.image.vendor=StreamVault
          org.opencontainers.image.version=v${{ needs.version.outputs.new_version }}
          
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Determine Docker tag
      id: docker_tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "tag=develop" >> $GITHUB_OUTPUT
        else
          echo "tag=test" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=v${{ needs.version.outputs.new_version }}
          BRANCH=${{ needs.version.outputs.branch }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'frequency2098/streamvault:${{ steps.docker_tag.outputs.tag }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

  create-changelog:
    needs: [version, build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Debug information
        run: |
          echo "Branch: ${{ github.ref }}"
          echo "New version: v${{ needs.version.outputs.new_version }}"
          echo "Release type: ${{ needs.version.outputs.release_type }}"

      - name: Generate GitHub Release Notes
        id: github_release_notes
        uses: actions/github-script@v7
        with:
          script: |
            // Get commits since last release
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: await github.rest.repos.getLatestRelease({ 
                owner: context.repo.owner, 
                repo: context.repo.repo 
              }).then(r => r.data.tag_name).catch(() => 'HEAD~10'),
              head: 'HEAD'
            });
            
            // Format commits with full messages (not truncated)
            const commitList = commits.commits.map(commit => {
              const message = commit.commit.message.split('\n')[0]; // First line only
              const author = commit.author?.login || commit.commit.author.name;
              const sha = commit.sha.substring(0, 7);
              return `* ${message} by @${author} in ${sha}`;
            }).join('\n');
            
            // Create enhanced release notes
            const dockerInfo = `
            ## 🐳 Docker Image Update v${{ needs.version.outputs.new_version }}
            
            **New Docker image available:** \`frequency2098/streamvault:latest\`
            
            ### Quick Update Commands
            \`\`\`bash
            # Pull latest image
            docker pull frequency2098/streamvault:latest
            
            # Or specific version
            docker pull frequency2098/streamvault:v${{ needs.version.outputs.new_version }}
            
            # Update with docker-compose
            docker-compose pull && docker-compose up -d
            \`\`\`
            
            ## What's Changed
            
            ${commitList}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${await github.rest.repos.getLatestRelease({ 
              owner: context.repo.owner, 
              repo: context.repo.repo 
            }).then(r => r.data.tag_name).catch(() => 'v1.0.0')}...v${{ needs.version.outputs.new_version }}
            `;
            
            core.setOutput('release_notes', dockerInfo);
            return dockerInfo;

      #Alternative: AI-powered release notes (requires OpenAI API key in secrets)
      # - name: Generate AI Release Notes
      #   id: ai_release_notes
      #   uses: actions/github-script@v7
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #   with:
      #     script: |
      #       if (!process.env.OPENAI_API_KEY) {
      #         console.log('No OpenAI API key found, skipping AI generation');
      #         return null;
      #       }
            
      #       const { exec } = require('child_process');
      #       const util = require('util');
      #       const execAsync = util.promisify(exec);
            
      #       // Get commits since last release
      #       const { stdout: commits } = await execAsync('git log --pretty=format:"%h %s" --no-merges -20');
            
      #       // Call OpenAI API to generate release notes
      #       const response = await fetch('https://api.openai.com/v1/chat/completions', {
      #         method: 'POST',
      #         headers: {
      #           'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      #           'Content-Type': 'application/json'
      #         },
      #         body: JSON.stringify({
      #           model: 'gpt-4',
      #           messages: [{
      #             role: 'system',
      #             content: 'You are a technical writer creating release notes for a Docker application called StreamVault - an automated Twitch stream recording system. Generate professional, detailed release notes from commit messages.'
      #           }, {
      #             role: 'user',
      #             content: `Generate release notes for StreamVault v${{ needs.version.outputs.new_version }} based on these commits:\n\n${commits}\n\nFocus on user-facing changes, bug fixes, performance improvements, and new features. Format with emojis and clear sections.`
      #           }],
      #           max_tokens: 1000
      #         })
      #       });
            
      #       const data = await response.json();
      #       return data.choices[0].message.content;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: StreamVault v${{ needs.version.outputs.new_version }}
          body: ${{ steps.github_release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
          generate_release_notes: false