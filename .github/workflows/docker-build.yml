name: Docker Build and Push with Auto-Versioning (Optimized)

on:
  push:
    branches:
      - develop
      - main
      - rebase
    paths:
      - 'app/**'
      - 'migrations/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_type: ${{ steps.semver.outputs.release_type }}
      branch: ${{ steps.branch_name.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch name
        id: branch_name
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Determine version bump
        id: semver
        uses: paulhatch/semantic-version@v5.4.0  # Updated to latest
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR|BREAKING CHANGE)"
          minor_pattern: "(MINOR|feat|feature)"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true
          search_commit_body: false

      - name: Set final version
        id: version
        run: |
          if [ -n "${{ steps.semver.outputs.new_version }}" ]; then
            echo "new_version=${{ steps.semver.outputs.new_version }}" >> $GITHUB_OUTPUT
          else
            # Simplified fallback
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "1.0.0")
            IFS='.' read -ra VERSION_PARTS <<< "$LATEST_TAG"
            NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((${VERSION_PARTS[2]:-0} + 1))"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create version tag
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v$VERSION -m "Release v$VERSION"
          git push origin v$VERSION

  check_changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.changes.outputs.backend }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v3  # Updated to latest
        id: changes
        with:
          filters: |
            backend:
              - 'app/!(frontend)/**'
              - 'migrations/**'
              - 'Dockerfile'
              - 'requirements.txt'
            frontend:
              - 'app/frontend/**'

  build:
    needs: [version, check_changes]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    # Frontend caching optimization
    - name: Setup Node.js with caching
      if: needs.check_changes.outputs.frontend_changed == 'true'
      uses: actions/setup-node@v4  # Updated to latest
      with:
        node-version: 'lts/*'
        cache: 'npm'
        cache-dependency-path: 'app/frontend/package-lock.json'
        
    - name: Cache frontend build
      if: needs.check_changes.outputs.frontend_changed == 'true'
      uses: actions/cache@v4  # Updated to latest
      with:
        path: app/frontend/dist
        key: frontend-build-${{ hashFiles('app/frontend/**') }}
        restore-keys: |
          frontend-build-
        
    - name: Build Frontend
      if: needs.check_changes.outputs.frontend_changed == 'true'
      working-directory: app/frontend
      run: |
        npm ci  # Faster than npm install for CI
        npm run build
        mkdir -p ../../dist
        cp -r dist/* ../../dist/
        
    - name: Use cached frontend build
      if: needs.check_changes.outputs.frontend_changed != 'true'
      run: echo "Frontend unchanged, using cached build"
    
    # Docker optimization
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  # Updated to latest
      with:
        driver-opts: image=moby/buildkit:buildx-stable-1  # Latest buildkit
        
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3  # Updated to latest
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5  # Updated to latest
      with:
        images: |
          frequency2098/streamvault
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
          type=raw,value=v${{ needs.version.outputs.new_version }},enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=StreamVault
          org.opencontainers.image.description=Automated Twitch stream recording and management system
          org.opencontainers.image.vendor=StreamVault
          org.opencontainers.image.version=v${{ needs.version.outputs.new_version }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5  # Updated to latest
      with:
        context: .
        platforms: linux/amd64  # AMD64 only for now
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=v${{ needs.version.outputs.new_version }}
          BRANCH=${{ needs.version.outputs.branch }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
        cache-from: type=gha  # GitHub Actions cache
        cache-to: type=gha,mode=max
        
    # Parallel security scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: frequency2098/streamvault:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'  # Only scan for critical/high
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Separate job for changelog (runs in parallel with security scan)
  create-changelog:
    needs: [version]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog and create release
        uses: actions/github-script@v7
        with:
          script: |
            // Get commits since last release
            let baseRef = 'HEAD~10';
            try {
              const latest = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              baseRef = latest.data.tag_name;
            } catch (error) {
              console.log('No previous release found, using HEAD~10');
            }
            
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: baseRef,
              head: 'HEAD'
            });
            
            // Categorize commits
            const features = [];
            const fixes = [];
            const other = [];
            
            comparison.commits.forEach(commit => {
              const message = commit.commit.message.split('\n')[0];
              const author = commit.author?.login || commit.commit.author.name;
              const sha = commit.sha.substring(0, 7);
              const line = '* ' + message + ' by @' + author + ' in ' + sha;
              
              if (message.toLowerCase().includes('feat') || message.toLowerCase().includes('feature')) {
                features.push(line);
              } else if (message.toLowerCase().includes('fix') || message.toLowerCase().includes('bug')) {
                fixes.push(line);
              } else {
                other.push(line);
              }
            });
            
            // Build release notes
            let releaseNotes = '## 🐳 StreamVault v${{ needs.version.outputs.new_version }}\n\n';
            releaseNotes += '**Docker Images:**\n';
            releaseNotes += '- `frequency2098/streamvault:latest`\n';
            releaseNotes += '- `frequency2098/streamvault:v${{ needs.version.outputs.new_version }}`\n';
            releaseNotes += '- `ghcr.io/${{ github.repository }}:latest`\n\n';
            releaseNotes += '### Quick Update\n';
            releaseNotes += '```bash\n';
            releaseNotes += 'docker pull frequency2098/streamvault:latest\n';
            releaseNotes += 'docker-compose pull && docker-compose up -d\n';
            releaseNotes += '```\n\n';
            
            if (features.length > 0) {
              releaseNotes += '## ✨ New Features\n' + features.join('\n') + '\n\n';
            }
            if (fixes.length > 0) {
              releaseNotes += '## 🐛 Bug Fixes\n' + fixes.join('\n') + '\n\n';
            }
            if (other.length > 0) {
              releaseNotes += '## 🔧 Other Changes\n' + other.join('\n') + '\n\n';
            }
            
            releaseNotes += '**Full Changelog**: https://github.com/${{ github.repository }}/compare/' + baseRef + '...v${{ needs.version.outputs.new_version }}';
            
            // Create release
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ needs.version.outputs.new_version }}',
              name: 'StreamVault v${{ needs.version.outputs.new_version }}',
              body: releaseNotes,
              draft: false,
              prerelease: false
            });

  # Optional: Deploy to staging/production
  deploy:
    needs: [build, version]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # environment: production  # Uncomment when you create the production environment
    steps:
      - name: Deploy notification
        run: |
          echo "🚀 StreamVault v${{ needs.version.outputs.new_version }} is ready for deployment!"
          echo "Image: frequency2098/streamvault:v${{ needs.version.outputs.new_version }}"