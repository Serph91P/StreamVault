name: Docker Build and Push with Auto-Versioning

on:
  push:
    branches:
      - develop
      - main
      - rebase
    paths:
      - 'app/**'
      - 'migrations/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/docker-build.yml'

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to create tags
    outputs:
      new_version: ${{ steps.semver.outputs.new_version }}
      release_type: ${{ steps.semver.outputs.release_type }}
      branch: ${{ steps.branch_name.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch name
        id: branch_name
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Determine version bump
        id: semver
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: false
          search_commit_body: true

      - name: Create version tag
        id: create_tag
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Creating tag v${{ steps.semver.outputs.new_version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ steps.semver.outputs.new_version }} -m "Release v${{ steps.semver.outputs.new_version }}"
          git push origin v${{ steps.semver.outputs.new_version }} || { echo "Failed to push tag"; exit 1; }
          echo "Tag v${{ steps.semver.outputs.new_version }} created and pushed successfully"

  check_changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.check_paths.outputs.backend_changed }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if backend files changed
        id: check_paths
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend_changed:
              - 'app/**'
              - 'migrations/**'
              - 'Dockerfile'
              - 'requirements.txt'

  build:
    needs: [version, check_changes]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Build Frontend
      if: needs.check_changes.outputs.backend_changed == 'true'
      run: |
        cd app/frontend
        npm install
        npm run build
        mkdir -p ../../dist
        cp -r dist/* ../../dist/
        
    - name: Use cached frontend build
      if: needs.check_changes.outputs.backend_changed != 'true'
      run: echo "Using cached frontend build"
        
    - name: Prepare metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: frequency2098/streamvault
        tags: |
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
          type=raw,value=v${{ needs.version.outputs.new_version }},enable=${{ github.ref == 'refs/heads/main' }}
        labels: |
          org.opencontainers.image.title=StreamVault
          org.opencontainers.image.description=Automated Twitch stream recording and management system
          org.opencontainers.image.vendor=StreamVault
          org.opencontainers.image.version=v${{ needs.version.outputs.new_version }}
          
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Determine Docker tag
      id: docker_tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "tag=develop" >> $GITHUB_OUTPUT
        else
          echo "tag=test" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=v${{ needs.version.outputs.new_version }}
          BRANCH=${{ needs.version.outputs.branch }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'frequency2098/streamvault:${{ steps.docker_tag.outputs.tag }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

  create-changelog:
    needs: [version, build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Debug information
        run: |
          echo "Branch: ${{ github.ref }}"
          echo "New version: v${{ needs.version.outputs.new_version }}"
          echo "Release type: ${{ needs.version.outputs.release_type }}"

      - name: Generate release notes
        id: generate_release_notes
        run: |
          # Extract commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep -i "feat\|feature\|enhancement" || echo "")
          FIXES=$(echo "$COMMITS" | grep -i "fix\|bug\|hotfix" || echo "")
          DOCS=$(echo "$COMMITS" | grep -i "doc\|documentation" || echo "")
          REFACTORS=$(echo "$COMMITS" | grep -i "refactor\|refactoring" || echo "")
          OTHER=$(echo "$COMMITS" | grep -v -i "feat\|feature\|enhancement\|fix\|bug\|hotfix\|doc\|documentation\|refactor\|refactoring" || echo "")
          
          # Create the release notes markdown content
          cat > release_notes.md << EOL
          ## Docker Image Update v${{ needs.version.outputs.new_version }}
          
          🚀 **New Docker image available:** \`frequency2098/streamvault:latest\`
          
          ### What's new?
          
          #### ✨ New Features
          ${FEATURES:-"- No new features in this release"}
          
          #### 🐛 Bug Fixes
          ${FIXES:-"- No bug fixes in this release"}
          
          #### 📄 Documentation
          ${DOCS:-"- No documentation changes in this release"}
          
          #### 🔧 Refactoring
          ${REFACTORS:-"- No refactoring in this release"}
          
          #### 🔄 Other Changes
          ${OTHER:-"- No other changes in this release"}
          
          ### How to update
          
          #### Pull the latest image:
          \`\`\`bash
          docker pull frequency2098/streamvault:latest
          # or specific version:
          docker pull frequency2098/streamvault:v${{ needs.version.outputs.new_version }}
          \`\`\`
          
          #### Update with Docker Compose:
          \`\`\`bash
          docker-compose pull
          docker-compose up -d
          \`\`\`
          EOL
          
          # Save release notes to GitHub output
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: Docker Update v${{ needs.version.outputs.new_version }}
          body: ${{ steps.generate_release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false