name: Python Code Quality

on:
  push:
    paths:
      - 'app/**'
      - 'migrations/**'
      - 'requirements.txt'
      - '.github/**/*.yml'
      - 'pyproject.toml'
      - 'mypy.ini'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

permissions:
  contents: read

env:
  PYTHON_VERSION: '3.13'  # Define Python version once for all jobs

jobs:
  lint-flake8:
    runs-on: ubuntu-latest
    name: Lint with flake8
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Check syntax errors
        run: |
          python -m flake8 app migrations --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Check undefined variables and imports
        run: |
          python -m flake8 app migrations --count --select=F821,F822,E999,F401 --show-source --statistics

  type-check:
    runs-on: ubuntu-latest
    name: Type checking with mypy
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy sqlalchemy-stubs types-aiofiles
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run mypy on utils
        run: |
          mypy --config-file mypy.ini app/utils/
          
      - name: Run mypy on services
        run: |
          mypy --config-file mypy.ini app/services/
        continue-on-error: true

  format-check:
    runs-on: ubuntu-latest
    name: Check code formatting
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Check import order with isort
        run: |
          python -m isort app/. --check --verbose
        continue-on-error: true
          
      - name: Check formatting with black
        run: |
          python -m black app --check --diff --verbose --line-length 120
        continue-on-error: true

  import-test:
    runs-on: ubuntu-latest
    name: Test module imports
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare directories for testing
        run: |
          mkdir -p /tmp/logs/streamlink /tmp/logs/ffmpeg /tmp/logs/app
          sudo mkdir -p /app
          sudo chmod -R 777 /tmp/logs /app

      - name: Run import test
        run: |
          python ci_import_test.py
