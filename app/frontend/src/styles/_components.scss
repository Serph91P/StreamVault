@use 'sass:map';
@use 'sass:color';
@use 'variables' as v;

// Navigation
nav {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: v.$spacing-sm;
  width: 100%;

  @media (min-width: map.get(v.$breakpoints, 'md')) {
    width: auto;
    gap: 1.5rem;
  }

  a {
    color: v.$text-secondary;
    text-decoration: none;
    font-weight: 500;
    padding: v.$spacing-sm;
    border-radius: 4px;
    transition: all 0.2s ease;
    font-size: map.get(v.$font-scale, 'sm');

    @media (min-width: map.get(v.$breakpoints, 'md')) {
      padding: v.$spacing-sm v.$spacing-md;
      font-size: map.get(v.$font-scale, 'base');
    }

    &:hover {
      color: v.$text-primary;
      background: rgba(255, 255, 255, 0.1);
    }

    &.router-link-active {
      color: v.$primary-color;
      background: rgba(145, 71, 255, 0.1);
    }
  }
}

// Forms
.form-group {
  margin-bottom: v.$spacing-md;
}

.input-field {
  width: 100%;
  box-sizing: border-box;
  background: v.$background-dark;
  border: 2px solid v.$border-color;
  color: v.$text-primary;
  padding: v.$spacing-sm v.$spacing-md;
  border-radius: 6px;
  font-size: map.get(v.$font-scale, 'base');
  transition: all 0.2s ease;

  &:focus {
    outline: none;
    border-color: v.$primary-color;
    box-shadow: 0 0 0 2px rgba(66, 184, 131, 0.2);
  }

  &::placeholder {
    color: v.$text-secondary;
  }
}

.form-control {
  @extend .input-field;
}

// Input with tooltip
.input-with-tooltip {
  position: relative;
  width: 100%;

  .tooltip-wrapper {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    margin-top: v.$spacing-sm;

    .tooltip-link {
      color: v.$primary-color;
      text-decoration: none;
      cursor: pointer;
      
      &:hover {
        text-decoration: underline;
        color: color.scale(v.$primary-color, $lightness: -10%);
      }
    }
  }
}

// Form fields
.form-control-sm {
  width: 100%;
  height: 36px;
  font-size: 0.875rem;
  padding: 0.5rem;
  background: v.$background-dark;
  border: 1px solid v.$border-color;
  color: v.$text-primary;
  border-radius: 4px;
  
  &:focus {
    outline: none;
    border-color: v.$primary-color;
  }
}

.help-text {
  font-size: 0.85rem;
  color: v.$text-secondary;
  margin-top: 0.25rem;
}

// Form structures
.form-actions {
  display: flex;
  gap: 10px;
  margin-top: 20px;
}

// Checkbox groups
.checkbox-group {
  label {
    display: flex;
    align-items: flex-start;
    font-weight: normal;
    text-align: left;
  }

  input[type="checkbox"] {
    margin-right: 8px;
    margin-top: 4px;
  }
}

// Grids and Cards
.card-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  row-gap: v.$spacing-lg;
  column-gap: v.$spacing-md;
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
  
  @media (min-width: map.get(v.$breakpoints, 'md')) {
    grid-template-columns: repeat(2, 1fr);
    column-gap: v.$spacing-lg;
    row-gap: v.$spacing-xl;
  }

  @media (min-width: map.get(v.$breakpoints, 'lg')) {
    grid-template-columns: repeat(3, 1fr);
    column-gap: v.$spacing-lg;
    row-gap: v.$spacing-xl;
  }
}

.streamer-grid {
  @extend .card-grid;
}

.stream-grid, .stream-list {
  @extend .card-grid;
}

.channels-grid {
  @extend .card-grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
}

.categories-grid {
  @extend .card-grid;
}

// Cards
.card {
  background: v.$background-darker;
  border-radius: 8px;
  padding: v.$spacing-md;
  margin-bottom: v.$spacing-md;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  @media (min-width: map.get(v.$breakpoints, 'md')) {
    padding: v.$spacing-lg;
  }
}

.streamer-card {
  @extend .card;
  display: flex;
  flex-direction: column;
  min-height: 200px;
  width: 100%;
  box-sizing: border-box;
  transition: transform 0.2s ease;
  word-break: break-word;
  
  .streamer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: v.$spacing-md;
    flex-wrap: wrap;
    gap: v.$spacing-sm;
  }

  .streamer-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: v.$spacing-sm;

    p {
      margin: 0;
      line-height: 1.4;
      overflow-wrap: break-word;
    }
  }

  &:hover {
    transform: translateY(-2px);
  }
}

.stream-card {
  @extend .card;
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease;
  
  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }
  
  .stream-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: v.$spacing-sm v.$spacing-md;
    background-color: v.$background-darker;
    border-bottom: 1px solid v.$border-color;
  }
  
  .stream-info {
    display: flex;
    align-items: center;
    gap: v.$spacing-sm;
    
    h3 {
      margin: 0;
      font-size: 1rem;
    }
  }
  
  .stream-content {
    padding: v.$spacing-md;
    
    p {
      margin: v.$spacing-xs 0;
    }
  }
}

.channel-card {
  @extend .card;
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
  transition: all 0.2s ease;
  border-left: 3px solid transparent;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  &.selected {
    background-color: rgba(v.$primary-color, 0.1);
    border-left: 3px solid v.$primary-color;
  }
  
  .channel-content {
    .channel-name {
      font-weight: bold;
      margin-bottom: v.$spacing-xs;
    }
    
    .channel-login {
      font-size: map.get(v.$font-scale, 'sm');
      color: v.$text-secondary;
    }
  }
  
  .selection-indicator {
    font-size: 1.5rem;
    color: v.$primary-color;
  }
}

.category-card {
  @extend .card;
  overflow: hidden;
  transition: transform 0.2s ease, box-shadow 0.2s ease;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  &.is-favorite {
    border: 2px solid #9146FF;
  }

  .category-image {
    height: 180px;
    overflow: hidden;

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }

  .category-details {
    padding: 15px;

    h4 {
      margin: 0 0 10px 0;
      font-size: 1rem;
    }
  }

  .category-actions {
    margin-top: 10px;
  }
}

// Streamer info
.streamer-info {
  display: flex;
  align-items: center;
  gap: v.$spacing-sm;

  .profile-image {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
  }
}

// Status indicators
.status-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #ff4444;
  transition: background-color 0.3s;

  &.live {
    background: #44ff44;
  }
}

.status-badge {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: map.get(v.$font-scale, 'xs');
  font-weight: bold;
  min-width: 60px;
  text-align: center;

  &.live {
    background: v.$success-color;
    color: white;
  }

  &.offline {
    background: v.$danger-color;
    color: white;
  }
}

// Buttons
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: v.$spacing-sm v.$spacing-md;
  border-radius: 6px;
  font-size: map.get(v.$font-scale, 'base');
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
  background-image: linear-gradient(to bottom, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: auto;

  &:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  &:active:not(:disabled) {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  &:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  // Button variants
  &-primary {
    background: v.$primary-color;
    color: white;
    &:hover:not(:disabled) {
      background: color.scale(v.$primary-color, $lightness: -10%);
    }
  }

  &-danger, &-delete {
    background: v.$danger-color;
    color: white;
    &:hover:not(:disabled) {
      background: color.scale(v.$danger-color, $lightness: -10%);
    }
  }

  &-secondary {
    background: v.$background-darker;
    color: v.$text-primary;
    border: 1px solid v.$border-color;
    
    &:hover:not(:disabled) {
      background: color.scale(v.$background-darker, $lightness: 5%);
    }
  }

  &-success {
    background: v.$success-color;
    color: white;
    &:hover:not(:disabled) {
      background: color.scale(v.$success-color, $lightness: -10%);
    }
  }

  &-twitch {
    background-color: #9146FF;
    color: white;
    
    &:hover:not(:disabled) {
      background-color: color.scale(#9146FF, $lightness: -10%);
    }
  }
}

// Legacy button styles for compatibility
.submit-button {
  @extend .btn;
  @extend .btn-primary;
  width: 100%;
  position: relative;
  overflow: hidden;
  
  @media (min-width: map.get(v.$breakpoints, 'md')) {
    width: auto;
  }
}

.delete-btn {
  @extend .btn;
  @extend .btn-danger;
}

.view-btn {
  @extend .btn;
  @extend .btn-success;
  padding: v.$spacing-xs v.$spacing-sm;
  font-size: map.get(v.$font-scale, 'sm');
}

// Button ripple effect
.btn::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 5px;
  height: 5px;
  background: rgba(255,255,255,0.5);
  opacity: 0;
  border-radius: 100%;
  transform: scale(1, 1) translate(-50%);
  transform-origin: 50% 50%;
}

.btn:focus:not(:active)::after {
  animation: ripple 1s ease-out;
}

@keyframes ripple {
  0% {
    transform: scale(0, 0);
    opacity: 0.5;
  }
  20% {
    transform: scale(25, 25);
    opacity: 0.3;
  }
  100% {
    opacity: 0;
    transform: scale(40, 40);
  }
}

// Tables
.table-container, .streamer-table-container {
  width: 100%;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  padding: v.$spacing-md;
  
  table {
    width: 100%;
    border-collapse: collapse;
    
    th, td {
      padding: v.$spacing-md;
      text-align: left;
      vertical-align: middle;
      border-bottom: 1px solid v.$border-color;
      
      @media (min-width: map.get(v.$breakpoints, 'md')) {
        padding: v.$spacing-lg;
      }
    }
    
    th {
      font-weight: 600;
      background-color: rgba(0, 0, 0, 0.2);
      color: v.$text-primary;
    }
    
    tbody tr:hover {
      background-color: rgba(255, 255, 255, 0.05);
    }
    
    @media (max-width: map.get(v.$breakpoints, 'md')) {
      display: block;
      
      th, td {
        min-width: 120px;
      }
      
      td:before {
        content: attr(data-label);
        float: left;
        font-weight: bold;
        text-transform: uppercase;
      }
    }
  }
}

// Loading indicators
.spinner {
  border: 4px solid rgba(255, 255, 255, 0.1);
  border-radius: 50%;
  border-top: 4px solid v.$primary-color;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto v.$spacing-md;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loader {
  width: 16px;
  height: 16px;
  border: 2px solid #fff;
  border-top: 2px solid transparent;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

// Loading and empty states
.loading-container, .no-data-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 200px;
  text-align: center;
  padding: v.$spacing-xl;
  
  p {
    color: v.$text-secondary;
    margin-bottom: v.$spacing-md;
  }
  
  .btn {
    margin-top: v.$spacing-md;
  }
}

// Notification Feed
.notification-feed {
  position: fixed;
  bottom: v.$spacing-md;
  left: v.$spacing-md;
  right: v.$spacing-md;
  z-index: map.get(v.$z-layers, 'toast');

  @media (min-width: map.get(v.$breakpoints, 'md')) {
    bottom: auto;
    top: 80px;
    right: v.$spacing-md;
    left: auto;
    width: 300px;
  }
}

.notification-item {
  background: #2f2f2f;
  color: white;
  padding: 1rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);

  &.success {
    background: v.$success-color;
  }

  &.error {
    background: v.$danger-color;
  }
}

// Animations
.notification-enter-active,
.notification-leave-active {
  transition: all 0.3s ease;
}

.notification-enter-from,
.notification-leave-to {
  opacity: 0;
  transform: translateX(30px);
}

// Back button
.back-btn-container {
  margin-bottom: v.$spacing-md;
}

.back-btn {
  display: inline-flex;
  align-items: center;
  
  &::before {
    content: "←";
    margin-right: v.$spacing-xs;
  }
}

// Notice boxes
.error-message {
  padding: v.$spacing-md;
  background: rgba(v.$danger-color, 0.1);
  border-left: 4px solid v.$danger-color;
  color: v.$danger-color;
  margin-bottom: v.$spacing-lg;
  border-radius: 4px;
}

.admin-notice {
  margin: v.$spacing-md 0;
  padding: v.$spacing-md;
  background-color: rgba(255, 200, 0, 0.1);
  border-left: 4px solid #ffcc00;
  border-radius: 4px;
  
  h4 {
    margin-bottom: v.$spacing-sm;
    color: color.adjust(#ffcc00, $lightness: -20%);;
  }
  
  .config-steps {
    margin: v.$spacing-md 0;
    background-color: rgba(0, 0, 0, 0.2);
    padding: v.$spacing-md;
    border-radius: 4px;
    
    pre {
      padding: v.$spacing-sm;
      background-color: rgba(0, 0, 0, 0.3);
      border-radius: 4px;
      overflow-x: auto;
      margin: v.$spacing-xs 0 v.$spacing-md;
      font-family: monospace;
    }
  }
}

// Search and filter elements
.filter-container {
  display: flex;
  flex-wrap: wrap;
  gap: v.$spacing-md;
  margin-bottom: v.$spacing-lg;
  align-items: center;
  
  .search-box {
    flex: 1;
    min-width: 200px;
    
    input {
      width: 100%;
    }
  }
  
  .filter-buttons {
    display: flex;
    gap: v.$spacing-sm;
    flex-wrap: wrap;
  }
}

// Tabs
.tabs {
  display: flex;
  flex-wrap: wrap;
  border-bottom: 1px solid v.$border-color;
  margin-bottom: v.$spacing-lg;
  
  .tab {
    padding: v.$spacing-sm v.$spacing-md;
    background: none;
    border: none;
    cursor: pointer;
    color: v.$text-secondary;
    font-size: map.get(v.$font-scale, 'base');
    border-bottom: 3px solid transparent;
    transition: color 0.2s, border-color 0.2s;
    margin-bottom: -1px;
    
    &.active {
      color: v.$primary-color;
      border-bottom-color: v.$primary-color;
    }
    
    &:hover:not(.active) {
      color: v.$text-primary;
      border-bottom-color: v.$border-color;
    }
  }
}